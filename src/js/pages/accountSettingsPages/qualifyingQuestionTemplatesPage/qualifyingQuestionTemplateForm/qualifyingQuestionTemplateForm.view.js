import React, { useState } from 'react';
import {
  Button,
  IconButton,
  Input,
  Item,
  Select,
  Text,
  Tooltip,
} from '@bloobirds-it/bloobirds-platform-component-library';
import { Controller, FormContext, useFieldArray, useForm } from 'react-hook-form';
import {
  FORM_MODES,
  QQ_TYPES,
  QQ_TYPES_COPIES,
  TEMPLATE_TYPES,
} from '../../../../utils/templates.utils';
import { ControlledSwitch } from '../../../../components/controlledSwitch/controlledSwitch.view';
import messagingFormStyles from '../../../../layouts/messagingSectionLayout/messagingTemplateFormLayout/messagingTemplateForm/messagingTemplateForm.module.css';
import styles from './qualifyingQuestionTemplateForm.module.css';
import OrderingArrows from '../../../../components/orderingArrows/orderingArrows.view';
import DeactivateAnswerModal from './deactivateAnswerModal';
import AnswerRow from './answerRow';
import { v4 as generateRandomId } from 'uuid';
import MessagingTemplateFooterActions from '../../../../components/messagingTemplates/messagingTemplateFooterActions/messagingTemplateFooterActions';
import MessagingSidebarSettings from '../../../../layouts/messagingSectionLayout/messagingTemplateFormLayout/messagingSidebarSettings';
import { forceCacheRefresh } from '../../../../hooks/entities/useEntity.utils';

const isAutogeneratedId = id => id.length > 16;

const parseQQAnswer = (answer, index) => ({
  score: parseInt(answer.score, 10),
  value: answer.value,
  id: isAutogeneratedId(answer.id) ? undefined : answer.id,
  order: index,
  enabled: answer.enabled === 'true',
});

const QualifyingQuestionTemplateFormView = ({ existingQQ, mode, onCancel, onSave }) => {
  const answers = existingQQ?.answers || [];

  const defaultValues = {
    id: existingQQ?.id,
    question: existingQQ?.question,
    enabled: existingQQ ? existingQQ.enabled : true,
    isRequiredBeforeMeeting: existingQQ ? existingQQ.isRequiredBeforeMeeting : false,
    type: existingQQ ? existingQQ.type : '',
    activeAnswers: answers.filter(answer => answer.enabled),
    inactiveAnswers: answers.filter(answer => !answer.enabled),
    stage: existingQQ?.stage || 'PROSPECT',
    segmentationValues: existingQQ?.segmentationValues,
  };

  const [currentAnswer, setCurrentAnswer] = useState();
  const [deactivateVisible, setDeactivateVisible] = useState(false);
  const methods = useForm({ defaultValues });
  const activeAnswers = useFieldArray({ control: methods.control, name: 'activeAnswers' });
  const inactiveAnswers = useFieldArray({ control: methods.control, name: 'inactiveAnswers' });

  const onSubmit = async data => {
    data.answers = [];

    if (data.activeAnswers) {
      data.answers = data.answers.concat(data.activeAnswers.map(parseQQAnswer));
    }

    if (data.inactiveAnswers) {
      data.answers = data.answers.concat(data.inactiveAnswers.map(parseQQAnswer));
    }

    if (mode === FORM_MODES.CREATION) {
      data.answers.forEach(answer => (answer.id = undefined));
    }

    const templatePayload = {
      ...data,
      id: existingQQ?.id,
      segmentationValues: data.segmentationValues || {},
      bobjectPicklistFieldValueIds: Object.values(data.segmentationValues || {})
        .flat()
        .filter(Boolean),
      activeAnswers: undefined,
      inactiveAnswers: undefined,
    };
    if (mode === 'CLONE') {
      await onSave({
        ...templatePayload,
        id: undefined,
        answers: templatePayload.answers.map(answer => ({ ...answer, id: undefined })),
      });
    } else {
      await onSave(templatePayload);
    }
    forceCacheRefresh();
  };

  const handleRemove = (answer, index) => {
    if (!answer.id) {
      activeAnswers.remove(index);
      return;
    }

    setDeactivateVisible(true);
    setCurrentAnswer({
      ...answer,
      enabled: false,
      index,
    });
  };

  const handleDeactivateConfirm = () => {
    activeAnswers.remove(currentAnswer.index);
    inactiveAnswers.append({ ...currentAnswer, enabled: false });
    setDeactivateVisible(false);
  };

  return (
    <FormContext {...methods}>
      <form onSubmit={methods.handleSubmit(onSubmit)}>
        <main className={messagingFormStyles._content}>
          <DeactivateAnswerModal
            visible={deactivateVisible}
            onCancel={() => setDeactivateVisible(false)}
            onConfirm={handleDeactivateConfirm}
          />
          <div className={messagingFormStyles._editor}>
            <Button
              className={messagingFormStyles._back__button}
              onClick={onCancel}
              variant="clear"
              color="bloobirds"
              iconLeft="arrowLeft"
            >
              Back to the list
            </Button>
            <header>
              <Text color="peanut" size="xl" weight="medium">
                Configure Qualified Question
              </Text>
              <div className={styles._form__row}>
                <Controller
                  name="question"
                  as={Input}
                  control={methods.control}
                  rules={{
                    required: 'A name for the question is required',
                    validate: value =>
                      value.length < 255 || "The question can't have more than 255 characters",
                  }}
                  placeholder="Question"
                  width="360px"
                  error={methods.errors.question?.message}
                />
                <Controller
                  name="type"
                  as={
                    <Select
                      name="defaultConnection"
                      width="180px"
                      placeholder="Type"
                      disabled={!!existingQQ}
                    >
                      {Object.values(QQ_TYPES).map(qqType => (
                        <Item value={qqType} key={qqType}>
                          {QQ_TYPES_COPIES[qqType]}
                        </Item>
                      ))}
                    </Select>
                  }
                  rules={{ required: 'You should select the type of the qualifying question' }}
                  control={methods.control}
                  error={methods.errors.type?.message}
                />
                <ControlledSwitch control={methods.control} name="enabled">
                  Enabled
                </ControlledSwitch>
              </div>
            </header>
            <main>
              {methods.watch('type') === QQ_TYPES.GLOBAL_PICKLIST && (
                <section>
                  <Text color="peanut" size="m" weight="medium">
                    Answers
                  </Text>
                  <Text size="s" color="softPeanut">
                    Review best practices for adding scoring in the{' '}
                    <a href="https://support.bloobirds.com/">Knowledge Base</a>.
                  </Text>
                  <div className={styles._answers__container}>
                    {activeAnswers.fields.map((answer, index) => (
                      <AnswerRow
                        key={answer.id}
                        type="active"
                        control={methods.control}
                        index={index}
                        register={methods.register}
                        errors={methods.errors}
                        answer={answer}
                        left={
                          <OrderingArrows
                            onClickDown={() => activeAnswers.swap(index, index + 1)}
                            onClickUp={() => activeAnswers.swap(index, index - 1)}
                            disabledDown={index === activeAnswers.fields.length - 1}
                            disabledUp={index === 0}
                          />
                        }
                        right={
                          <Tooltip title="Remove" position="top">
                            <IconButton
                              name="trashFull"
                              onClick={e => {
                                e.preventDefault();
                                e.stopPropagation();
                                handleRemove(answer, index);
                              }}
                            />
                          </Tooltip>
                        }
                      />
                    ))}
                    <div className={styles._addAnswer__button}>
                      <Button
                        onClick={() =>
                          activeAnswers.append({
                            order: activeAnswers.fields.length,
                            value: '',
                            enabled: true,
                            score: '0',
                            id: generateRandomId(),
                          })
                        }
                        variant="secondary"
                      >
                        Add answer
                      </Button>
                    </div>
                  </div>
                </section>
              )}
              {inactiveAnswers.fields.length !== 0 && <hr className={styles._separator} />}
              {inactiveAnswers.fields.length !== 0 && (
                <section>
                  <Text color="peanut" size="m" weight="medium">
                    Inactive Answers
                  </Text>
                  <Text size="s" color="softPeanut">
                    These are no longer selectable, but have been set for 1 or more companies.
                  </Text>
                  <div className={styles._answers__container}>
                    {inactiveAnswers.fields.map((answer, index) => (
                      <AnswerRow
                        key={answer.id}
                        type="inactive"
                        control={methods.control}
                        index={index}
                        register={methods.register}
                        errors={methods.errors}
                        answer={answer}
                        left={
                          <Tooltip title="Reactivate Answer" position="top">
                            <IconButton
                              name="chevronUp"
                              size={16}
                              onClick={e => {
                                e.preventDefault();
                                e.stopPropagation();
                                inactiveAnswers.remove(index);
                                activeAnswers.append({
                                  ...answer,
                                  enabled: true,
                                });
                              }}
                            />
                          </Tooltip>
                        }
                      />
                    ))}
                  </div>
                </section>
              )}
            </main>
          </div>
          <MessagingSidebarSettings templateType={TEMPLATE_TYPES.QUALIFYING_QUESTION} />
        </main>
        <MessagingTemplateFooterActions
          type={TEMPLATE_TYPES.QUALIFYING_QUESTION}
          mode={mode}
          onCancel={onCancel}
        />
      </form>
    </FormContext>
  );
};

export default QualifyingQuestionTemplateFormView;
